import { useQueryClient } from "@tanstack/react-query";
import supabase from "./supabase";

export async function getCallTypes() {
  const { data, error } = await supabase
    .from("call_types")
    .select(`*, questions (id, question), keywords(id, keyword)`);

  if (error) {
    console.error(error);
    throw new Error("call_types could not be loaded");
  }

  const formattedData = {};

  data.forEach((element) => {
    const callType = element.name;

    const questions = element.questions.map((ele) => ele.question);
    const keywords = element.keywords.map((ele) => ele.keyword);

    formattedData[callType] = {
      questions: questions,
      keywords: keywords,
      id: element.id,
    };
  });

  return data;
}

export async function deleteCallType(id) {
  const { data, error } = await supabase
    .from("call_types")
    .delete()
    .eq("id", id);

  if (error) {
    throw new Error("CallType could not be deleted");
  }

  return data;
}

export async function createNewGuide(callType) {
  const { data: typeName, error } = await supabase
    .from("call_types")
    .insert({ name: callType.name })
    .select();

  const fkey = typeName ? typeName[0].id : null;

  for (const question of callType.questions) {
    const { data, error } = await supabase
      .from("questions")
      .insert({ call_type_id: fkey, question });
  }

  for (const keyword of callType.keywords) {
    const { error } = await supabase
      .from("keywords")
      .insert({ call_type_id: fkey, keyword });
  }

  if (error) console.error(error);
}

export async function updateQuestion(questionObj) {
  const { error } = await supabase
    .from("questions")
    .update({ question: questionObj.question })
    .eq("id", questionObj.id);

  if (error) console.error(error);
}

export async function addKeyWord() {}
